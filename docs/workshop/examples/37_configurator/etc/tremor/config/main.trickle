define script process
script
  use std::array;
  use std::string;
  use std::json;
  use std::type;
  use std::random;
  use tremor::origin;
  use tremor::system;

  # defaults for the server response
  let $response = {
    "status": 200,
    "headers": {
      "content-type": "application/json",
      "x-powered-by": "Tremor",
    }
  };

  match type::is_null(state) of
    case true =>
      let state = {"count": 0}
    default =>
      null
  end;

  # --------------------------------------------------------------------------

  # short-circuit if $request is absent
  match absent $request of
    case true =>
      let $response.status = 500,
      emit {
        "error": "No request metadata available",
        "event": event,
      } => "app_error"
    default =>
      null
  end;

  # --------------------------------------------------------------------------


  # split path for easier path matching and segment extraction
  # strip empty leading string
  let request_path_parts = string::split($request.url.path, "/");
  let request_path_parts = request_path_parts[1:array::len(request_path_parts)];

  let state.count = state.count + 1;

  # create a unique correlation id for collecting all responses from upstream quota serbvices
  # and join them in a single response event
  let $correlation = "#{system::ingest_ns()}#{random::integer(0, 100)}";

  # content based on method and path combo
  match [$request.method, $request.url.path] of
    case ["GET", "/"] =>
      let $response.headers["content-type"] = "text/plain",
      emit """
      Welcome to the Configurator!

      Available routes:

      GET /services
      GET /service/<id>
      GET /service/<id>/...
      PUT /service/<id>/...
      DELETE /service/<id>/...

      HEAD /ping
      GET /stats

      * /echo
      """

    case ["GET", "/services"] =>
      [
        "quota_service"
      ]
    case %("GET", ~ glob|/service/?*|) =>
      # get config values from one of the services
      let service_id = request_path_parts[1],
      let path = match array::len(request_path_parts) of
        case 2 => "/quotas"
        case 3 => "/quotas/#{request_path_parts[2]}"
      end,
      let $request.headers["Content-Type"] = "application/json",
      let $endpoint = {
        "path": path
      },
      emit "" => "#{service_id}"
    case %("PUT", ~ glob|/service/?*|) when array::len(request_path_parts) == 3 =>
      # put config values to all registered services
      let service_id = request_path_parts[1],
      let $response.status = 202,
      # TODO add common event structure and validate
      # also check if it's one of the registered services
      let $endpoint = {"path": "/quotas/#{request_path_parts[2]}"},
      emit event => "#{service_id}"
    case %("DELETE", ~ glob|/service/?*|) when array::len(request_path_parts) == 3 =>
      # delete a service config value
      # TODO: this is hard-coded logic for the quota_service
      # make it more dynamic by matching on the service_id
      let service_id = request_path_parts[1],
      let $endpoint = {"path": "/quotas/#{request_path_parts[2]}"},
      emit event => "#{service_id}"
    case ["HEAD", "/ping"] =>
      emit ""

    # application statistics
    case ["GET", "/stats"] =>
      emit {"requests_processed": state.count}

    # useful for debugging (also matches all methods)
    case %(_, "/echo") =>
      emit {
        "body": event,
        "meta": $request,
      }

    # our top-secret endpoint
    case ["GET", "/snot"] =>
      emit "badger"

    # example for runtime error handling
    case ["GET", "/error-test"] =>
      emit non_existent_var

    default =>
      let $response.status = 404,
      emit {
        "handler": "Configurator",
        "error": "Path '#{$request.url.path}' not found for method #{$request.method}",
        "event": event,
      } => "app_error"
  end;
end;

# https://docs.tremor.rs/tremor-query/operators/#qoswal
define qos::wal operator on_disk_wal with
  dir = "store",
  read_count = 20,
  max_elements = 1000 # Capacity limit of 1000 stored events
end;

create script process;
create operator on_disk_wal;

# main request processing
select event from in into process;
# this is for short-circuiting requests that dont need to go through the upstream quota services
select event from process into out;

# we send events directed at the quota_service through the wal to have them retried until they succeed.
select event from process/quota_service into on_disk_wal;
select event from on_disk_wal into out/quota_service;

# our defined app errors (still succesful processing from tremor's perspective)
# useful to track these from different port (app_error) for metrics
select event from process/app_error into out;

# tremor runtime errors from the processing script
select event from process/err into err;
